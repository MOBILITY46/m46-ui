{"version":3,"sources":["../../../src/card/flip-card.tsx"],"names":["React","Box","ChakraBox","AnimatePresence","motion","useFlipCard","useFlipCardContext","FlipCardContextProvider","props","rotateY","type","stiffness","damping","position","backfaceVisibility","children","FlipCard","context","face","front","back","FlipCardTrigger","getTriggerProps","child","Children","only","cloneElement","ref"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,GAAG,IAAIC,SAAhB,QAAiC,mBAAjC;AACA,SAASC,eAAT,EAA0BC,MAA1B,QAAwC,eAAxC;AAEA,SAASC,WAAT,QAA4B,iBAA5B;AACA,SAASC,kBAAT,EAA6BC,uBAA7B,QAA4D,WAA5D;;AAOA,IAAMN,GAAa,GAAIO,KAAD,iBACpB,oBAAC,MAAD,CAAQ,GAAR;AACE,EAAA,OAAO,EAAE;AAAEC,IAAAA,OAAO,EAAE,CAAC;AAAZ,GADX;AAEE,EAAA,IAAI,EAAE;AAAEA,IAAAA,OAAO,EAAE,CAAC;AAAZ,GAFR;AAGE,EAAA,OAAO,EAAE;AAAEA,IAAAA,OAAO,EAAE;AAAX,GAHX;AAIE,EAAA,UAAU,EAAE;AACVA,IAAAA,OAAO,EAAE;AACPC,MAAAA,IAAI,EAAE,OADC;AAEPC,MAAAA,SAAS,EAAE,EAFJ;AAGPC,MAAAA,OAAO,EAAE;AAHF;AADC,GAJd;AAWE,EAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EAAE,UADL;AAELC,IAAAA,kBAAkB,EAAE;AAFf;AAXT,GAgBGN,KAAK,CAACO,QAhBT,CADF;;AAqBA,OAAO,IAAMC,QAAQ,GAAIR,KAAD,IAA0B;AAChD,MAAMS,OAAO,GAAGZ,WAAW,EAA3B;AAEA,sBACE,oBAAC,uBAAD;AAAyB,IAAA,KAAK,EAAEY;AAAhC,kBACE,oBAAC,SAAD;AAAW,IAAA,QAAQ,EAAC;AAApB,kBACE,oBAAC,eAAD,QACGA,OAAO,CAACC,IAAR,KAAiB,OAAjB,iBAA4B,oBAAC,GAAD;AAAK,IAAA,GAAG,EAAE;AAAV,KAAcV,KAAK,CAACW,KAApB,CAD/B,EAEGF,OAAO,CAACC,IAAR,KAAiB,MAAjB,iBAA2B,oBAAC,GAAD;AAAK,IAAA,GAAG,EAAE;AAAV,KAAcV,KAAK,CAACY,IAApB,CAF9B,CADF,CADF,CADF;AAUD,CAbM;AAeP,OAAO,IAAMC,eAAyB,GAAIb,KAAD,IAAW;AAClD,MAAM;AAAEc,IAAAA;AAAF,MAAsBhB,kBAAkB,EAA9C;AACA,MAAMiB,KAAU,GAAGvB,KAAK,CAACwB,QAAN,CAAeC,IAAf,CAAoBjB,KAAK,CAACO,QAA1B,CAAnB;AACA,sBAAOf,KAAK,CAAC0B,YAAN,CAAmBH,KAAnB,EAA0BD,eAAe,CAACC,KAAK,CAACf,KAAP,EAAce,KAAK,CAACI,GAApB,CAAzC,CAAP;AACD,CAJM","sourcesContent":["import * as React from 'react'\nimport { ReactNode } from 'react'\nimport { Box as ChakraBox } from '@chakra-ui/layout'\nimport { AnimatePresence, motion } from 'framer-motion'\n\nimport { useFlipCard } from './use-flip-card'\nimport { useFlipCardContext, FlipCardContextProvider } from './context'\n\nexport interface FlipCardProps {\n  front: ReactNode[] | ReactNode\n  back: ReactNode[] | ReactNode\n}\n\nconst Box: React.FC = (props) => (\n  <motion.div\n    initial={{ rotateY: -180 }}\n    exit={{ rotateY: -180 }}\n    animate={{ rotateY: 0 }}\n    transition={{\n      rotateY: {\n        type: 'tween',\n        stiffness: 80,\n        damping: 20,\n      },\n    }}\n    style={{\n      position: 'absolute',\n      backfaceVisibility: 'hidden',\n    }}\n  >\n    {props.children}\n  </motion.div>\n)\n\nexport const FlipCard = (props: FlipCardProps) => {\n  const context = useFlipCard()\n\n  return (\n    <FlipCardContextProvider value={context}>\n      <ChakraBox position=\"relative\">\n        <AnimatePresence>\n          {context.face === 'front' && <Box key={0}>{props.front}</Box>}\n          {context.face === 'back' && <Box key={1}>{props.back}</Box>}\n        </AnimatePresence>\n      </ChakraBox>\n    </FlipCardContextProvider>\n  )\n}\n\nexport const FlipCardTrigger: React.FC = (props) => {\n  const { getTriggerProps } = useFlipCardContext()\n  const child: any = React.Children.only(props.children)\n  return React.cloneElement(child, getTriggerProps(child.props, child.ref))\n}\n"],"file":"flip-card.js"}