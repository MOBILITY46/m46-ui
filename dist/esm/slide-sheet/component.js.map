{"version":3,"sources":["../../../src/slide-sheet/component.tsx"],"names":["React","useRef","useState","useEffect","animate","AnimatePresence","useDragControls","useMotionValue","Wrapper","DraggableContainer","Sheet","Content","Mask","SlideSheetComponent","children","isOpen","id","debug","maskClosable","props","sheetY","sheetHeight","setSheetHeight","controls","sheetRef","handleClose","onClose","current","offsetHeight","maxDrag","removeToDom","window","document","getElementById","remove","duration","opacity","y","visible","hidden","top","bottom","e","info","contains","target","componentControls","forEach","entry","stop","get","type","setTimeout","onTap"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { useRef, useState, useEffect } from 'react'\nimport { animate, AnimatePresence, useDragControls, useMotionValue } from 'framer-motion'\n\nimport { Wrapper, DraggableContainer, Sheet, Content, Mask } from './styles'\n\nimport { Props } from './types'\n\nexport const SlideSheetComponent = ({ children, isOpen, id, debug, maskClosable, ...props }: Props): JSX.Element => {\n  const sheetY = useMotionValue(0)\n  const [sheetHeight, setSheetHeight] = useState(0)\n  const controls = useDragControls()\n\n  const sheetRef = useRef<HTMLDivElement>(null)\n\n  const handleClose = () => {\n    props.onClose()\n  }\n\n  useEffect(() => {\n    setSheetHeight(sheetRef?.current?.offsetHeight ?? 0)\n  }, [sheetRef, isOpen])\n\n  const maxDrag = sheetHeight / 3\n\n  const removeToDom = () => {\n    if (typeof window !== 'undefined') {\n      document?.getElementById?.(id!)?.remove()\n    }\n  }\n\n  return (\n    <>\n      <AnimatePresence onExitComplete={() => removeToDom()}>\n        {isOpen && (\n          <Wrapper\n            transition={{ duration: 0.2 }}\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n          >\n            <DraggableContainer\n              id=\"draggable-container\"\n              ref={sheetRef}\n              style={{\n                y: sheetY,\n              }}\n              drag=\"y\"\n              dragControls={controls}\n              variants={{\n                visible: { y: 0 },\n                hidden: { y: sheetHeight },\n              }}\n              dragConstraints={{\n                top: 0,\n                bottom: sheetHeight,\n              }}\n              onDragStart={(e, info) => {\n                if (!sheetRef?.current?.contains(e.target as HTMLDivElement)) {\n                  // @ts-ignore\n                  controls?.componentControls.forEach((entry) => {\n                    entry.stop(e, info)\n                  })\n                }\n              }}\n              onDragEnd={() => {\n                if (sheetY.get() < maxDrag) {\n                  animate(sheetY, 0, { type: 'spring' })\n                } else {\n                  animate(sheetY, sheetHeight, { type: 'spring' })\n                  setTimeout(() => {\n                    handleClose()\n                  }, 500)\n                }\n              }}\n            >\n              <Mask\n                transition={{ duration: 0.2 }}\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 0.2 }}\n                exit={{ opacity: 0 }}\n                debug={debug}\n                {...(maskClosable\n                  ? {\n                      onTap: () => {\n                        animate(sheetY, sheetHeight, { type: 'spring' })\n                        handleClose()\n                      },\n                    }\n                  : {})}\n              />\n              <Sheet\n                initial={{ y: '100%' }}\n                animate={{ y: 0 }}\n                exit={{ y: '100%' }}\n                transition={{\n                  duration: 0.2,\n                }}\n              >\n                <Content>{children}</Content>\n              </Sheet>\n            </DraggableContainer>\n          </Wrapper>\n        )}\n        {!isOpen && <div />}\n      </AnimatePresence>\n    </>\n  )\n}\n"],"file":"component.js"}