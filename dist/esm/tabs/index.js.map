{"version":3,"sources":["../../../src/tabs/index.tsx"],"names":["React","useState","useEffect","useRef","useMeasure","TabContainer","TabList","TabItem","Slider","TabItemWrapper","colors","Pager","Tabs","colorScheme","props","value","setValue","childRefs","Map","tabListRef","slider","setSlider","left","right","hasValue","bounds","ref","scrollOffset","setScrollOffset","tabNames","Object","keys","tabs","target","current","get","container","cRect","getBoundingClientRect","width","tRect","o","console","log","scroll","x","map","tab","i","duration","backgroundColor","el","set","tension","friction","mass"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { FC } from 'react'\nimport { useState, useEffect, useRef } from 'react'\nimport { useMeasure } from '../utils'\nimport { TabContainer, TabList, TabItem, Slider, TabItemWrapper } from './styles'\nimport { colors } from '../theme'\n\nimport { Pager } from './pager'\n\nimport { TabsProps } from './types'\n\nexport const Tabs: FC<TabsProps> = ({ colorScheme = 'primary', ...props }: TabsProps) => {\n  const [value, setValue] = useState(0)\n  const childRefs = useRef(new Map())\n  const tabListRef = useRef<HTMLDivElement>(null)\n  const [slider, setSlider] = useState({ left: 0, right: 0, hasValue: false })\n  const { bounds, ref } = useMeasure()\n  const [scrollOffset, setScrollOffset] = useState(0)\n\n  const tabNames = Object.keys(props.tabs || {})\n\n  useEffect(() => {\n    const target = childRefs.current.get(value)\n    const container = tabListRef.current\n    if (target) {\n      const cRect = container?.getBoundingClientRect()\n\n      // when container is `display: none`, width === 0.\n      // ignore this case\n      if (!cRect || cRect.width === 0) {\n        return\n      }\n\n      const tRect = target.getBoundingClientRect()\n      let left = tRect.left - cRect.left\n      let right = cRect.right - tRect.right\n\n      const slider = {\n        hasValue: true,\n        left,\n        right,\n      }\n\n      setSlider(slider)\n    }\n  }, [])\n\n  useEffect(() => {\n    const target = childRefs.current.get(value)\n    const container = tabListRef.current\n    if (target) {\n      const cRect = container?.getBoundingClientRect()\n\n      // when container is `display: none`, width === 0.\n      // ignore this case\n      if (!cRect || cRect.width === 0) {\n        return\n      }\n\n      const tRect = target.getBoundingClientRect()\n      let left = tRect.left - cRect.left\n      let right = cRect.right - tRect.right\n\n      const slider = {\n        hasValue: true,\n        left,\n        right,\n      }\n\n      if (value === 0) {\n        setSlider(slider)\n        return\n      }\n\n      if (right < tRect.width && value > 1) {\n        slider.left -= tRect.width\n        slider.right += tRect.width\n\n        setScrollOffset((o) => (o -= tRect.width))\n      } else if (left < tRect.width) {\n        slider.left += tRect.width\n        slider.right -= tRect.width\n\n        setScrollOffset((o) => (o += tRect.width))\n      }\n\n      console.log(scroll)\n\n      setSlider(slider)\n    }\n  }, [value, bounds])\n\n  return (\n    <>\n      <TabContainer ref={ref}>\n        <TabList ref={tabListRef}>\n          <TabItemWrapper animate={{ x: scrollOffset }}>\n            {(tabNames || []).map((tab, i) => (\n              <TabItem\n                color={colorScheme}\n                key={tab}\n                isActive={i === value}\n                transition={{ duration: 0.3 }}\n                whileTap={{ backgroundColor: colors['gray']['400'] }}\n                ref={(el) => childRefs.current.set(i, el)}\n                onTap={() => setValue(i)}\n              >\n                {tab}\n              </TabItem>\n            ))}\n          </TabItemWrapper>\n          {slider.hasValue && (\n            <Slider\n              color={colorScheme}\n              transition={{\n                tension: 190,\n                friction: 70,\n                mass: 0.4,\n              }}\n              initial={false}\n              animate={{\n                left: slider.left,\n                right: slider.right,\n              }}\n            />\n          )}\n        </TabList>\n      </TabContainer>\n      <Pager value={value}>\n        {tabNames.map((tab) => (\n          <li key={tab}>{props.tabs[tab]}</li>\n        ))}\n      </Pager>\n    </>\n  )\n}\n"],"file":"index.js"}